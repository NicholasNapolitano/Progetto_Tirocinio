#include "MapManager.h"
#include "ui/CocosGUI.h"
#include "Enums.h"
#include "Player.h"
#include <iostream>
#include "Bullet.h"
#include "HudLayer.h"
#include "GameManager.h"
#include "StrategyMenu.h"
#include "Enemy.h"
#include "Item.h"


USING_NS_CC;

Scene* MapManager::createScene()
{

	auto scene = Scene::create();
	auto layer = MapManager::create();

	scene->addChild(layer, 1, "MapManager");

	return scene;
}

// on "init" you need to initialize your instance
bool MapManager::init()
{
	//////////////////////////////
	// 1. super init first
	if (!Layer::init())
	{
		return false;
	}
	float scaleFactor = Director::getInstance()->getContentScaleFactor();
	this->core = GameManager::getInstance();
	this->deltaTime = 0;
	this->createMap();

	auto visibleSize = Director::getInstance()->getVisibleSize();
	auto winSize = Director::getInstance()->getWinSize();
	Vec2 origin = Director::getInstance()->getVisibleOrigin();
	Point center = Point(winSize.width + origin.x, winSize.height + origin.y);

	container = Node::create();
	container->setPosition(origin.x, origin.y);
	this->addChild(container, 4);

	tile = TMXTiledMap::create("GroundMap.tmx");
	tile->setPosition(Vec2(origin.x, origin.y));
	layer = tile->getLayer("Ground");
	container->addChild(tile, 1, "Mappa");

	for (int i = 0; i < MAP_WIDTH; i++) {
		for (int j = 0; j < MAP_HEIGHT; j++) {
			switch (mat[i][j])
			{
			case NONE:
				layer->setTileGID(118, Vec2(i, j));
				break;
			case GROUND:
				break;
			case WALL:
				layer->setTileGID(448, Vec2(i, j));
				break;
			case GRASS:
				layer->setTileGID(289, Vec2(i, j));
				break;
			case WATER:
				layer->setTileGID(121, Vec2(i, j));
				break;
			case GOAL:
				layer->setTileGID(400, Vec2(i, j));
				break;
			}
		}
	}

	_player = Player::create("Player.png");
	_player->setScale(25 / layer->getTileAt(Vec2(0,0))->getContentSize().width);
	_player->setMapGame(this);
	_player->setMappa(this->getMap());
	_player->setState(IDLE);
	_player->setActualScene(EXPLORATION);
	_player->setTileMap(this->getTileMap());
	_player->setPosition(Point(origin.x + 32, origin.y + 32));
	_player->setDestination(Point(origin.x + 957, origin.y + 957));
	tile->addChild(_player);

	this->positionEnemies();
	
	this->positionObjects();

	hud = new HudLayer();
	this->addChild(hud, 15);
	hud->setScore(1000);

	this->resizeMap();
	tile->setPosition(Vec2(origin.x, origin.y));
	// Register Touch Event
	auto dispatcher = Director::getInstance()->getEventDispatcher();
	auto listener = EventListenerTouchOneByOne::create();

	listener->onTouchBegan = CC_CALLBACK_2(MapManager::onTouchBegan, this);
	listener->onTouchEnded = CC_CALLBACK_2(MapManager::onTouchEnded, this);

	dispatcher->addEventListenerWithSceneGraphPriority(listener, this);

	log("WELCOME IN MY GAME. YOU HAVE TO REACH THE GOAL (THE STAIRS) TO WIN IT. GOOD LUCK!");

	_player->setMatrix();
	_player->solve((int)_player->getPosition().x, (int)_player->getPosition().y);
	
	_player->setMatrix2();
	_player->solve2((int)_player->getPosition().x, (int)_player->getPosition().y);
	
	this->scheduleUpdate();
	_player->scheduleUpdate();

	container->setScale(1/layer->getTileAt(Vec2(0, 0))->getScale());

	return true;
}

//Method which schedules the time in the Scene

void MapManager::update(float dt)
{
	auto scaleFact = Director::getInstance()->getContentScaleFactor();
	auto visibleSize = Director::getInstance()->getVisibleSize();
	Vec2 origin = Director::getInstance()->getVisibleOrigin();
    deltaTime += dt;

	if (this->getHud()->getScore() == 0) {
		core->loseGame();
	}

	auto mappa = this->getMap();
	auto tileCoord = this->tileCoordForPosition(_player->getPosition());

	if (deltaTime >= 0.5f) {

		hud->setScore(hud->getScore() - 1);

		Point position = _player->getPosition();

	    Size winSize = Director::getInstance()->getWinSize();

		int x = MAX(position.x * (layer->getTileAt(Vec2(0, 0))->getContentSize().width / 25), winSize.width / 2);
		int y = MAX(position.y * (layer->getTileAt(Vec2(0, 0))->getContentSize().width / 25), winSize.height / 2);
		x = MIN(x, (MAP_SIZE_WIDTH * (layer->getTileAt(Vec2(0, 0))->getContentSize().width / 25))-winSize.width / 2);
		y = MIN(y, (MAP_SIZE_HEIGHT * (layer->getTileAt(Vec2(0, 0))->getContentSize().width / 25))-winSize.height / 2);
		Point actualPosition = Point(x, y);

		Point centerOfView = Point(winSize.width / 2, winSize.height / 2);
		Point viewPoint = Point(centerOfView) - Point(actualPosition);
		container->runAction(MoveTo::create(0.499f, Vec2(viewPoint.x, viewPoint.y)));
		deltaTime = 0;
	}

}

//Enable the tap 
//Nothing happens

bool MapManager::onTouchBegan(Touch *touch, Event *event)
{
	return true;
}

//When you release the tap, the game will go in pause mode

void MapManager::onTouchEnded(Touch *touch, Event *event)
{	
	if (core->inPause()) {
		core->resumeGame();
		return;
	}
	core->pauseGame();
	return;
}

//Method which return the coordinates in TILE from the coordinates in POINT

Point MapManager::tileCoordForPosition(Point position)
{
	int x = position.x / TILE_WIDTH;
	int y = (MAP_SIZE_HEIGHT - position.y) / TILE_HEIGHT;
	return Point(x, y);
}

//First Pattern of Map

void MapManager::createMapI() {

	mat = new int*[MAP_WIDTH];
	for (int i = 0; i < MAP_WIDTH; ++i)
		mat[i] = new int[MAP_HEIGHT];

	int random0 = RandomHelper::random_int(GROUND, GRASS);
	int random1 = RandomHelper::random_int(GROUND, WATER);
	int random2 = RandomHelper::random_int(NONE, WALL);
	int random3 = RandomHelper::random_int(NONE, WATER);

	int map[MAP_WIDTH][MAP_HEIGHT] = {
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, random2, GROUND, random2, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, random2, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, random2, random2, random2, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, random1, random1, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, random2, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, random1, random1, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, random2, GROUND, random2, GROUND, GRASS, WALL, GRASS, GROUND, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random3, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random3, random3, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, GROUND, GROUND, random3, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, random3, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random3, GROUND, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random3, GROUND, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random3, random3, GROUND, GROUND, GROUND, GROUND, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, WALL, WALL, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, WALL, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GROUND, GROUND, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, WALL, WALL, GRASS, WALL },
		{ WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GRASS, WALL, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WALL, GRASS, WALL, WALL, WALL },
		{ WALL, GOAL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL, GRASS, GRASS, GRASS, GRASS, GRASS, WALL, GRASS, GRASS, GRASS, GRASS, GRASS, WALL, GRASS, GRASS, GRASS, GRASS, WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL, GRASS, GRASS, GRASS, WALL },
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL }
	};

	for (int i = 0; i < MAP_WIDTH; i++) {
		for (int j = 0; j < MAP_HEIGHT; j++) {
			mat[i][j] = map[i][j];
		}
	}
}

//Second Pattern of Map

void MapManager::createMapII() {

	mat = new int*[MAP_WIDTH];
	for (int i = 0; i < MAP_WIDTH; ++i)
		mat[i] = new int[MAP_HEIGHT];

	int random0 = RandomHelper::random_int(GROUND, GRASS);
	int random1 = RandomHelper::random_int(GROUND, WATER);
	int random2 = RandomHelper::random_int(NONE, WALL);
	int random3 = RandomHelper::random_int(NONE, WATER);

	int map[MAP_WIDTH][MAP_HEIGHT] = {
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL},
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL, WALL, WALL, GROUND, WALL, WALL, GROUND, WALL, GROUND, WALL, WALL, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL, WALL, WALL, GROUND, WALL, WALL, GROUND, WALL, GROUND, WALL, WALL, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, WALL, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, WALL, GROUND, WALL, WALL, WALL, WALL, GROUND, WALL, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, WALL, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, WALL, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, WALL, WALL },
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, WALL, WALL, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, WALL, GROUND, WALL, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, WALL, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, GROUND, GROUND, WALL, WALL, GROUND, WALL, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, WALL, GROUND, WALL, WALL, WALL, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL, WALL, GROUND, GROUND, WALL, WALL, WALL, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, WALL, WALL, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL, GROUND, WALL, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, WALL, GROUND, WALL, WALL, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, GROUND, WALL, GROUND, GROUND, GROUND, WALL, WALL, GROUND, WALL, WALL, WALL, WALL, WALL, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GOAL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL, WALL, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL }
	};

	for (int i = 0; i < MAP_WIDTH; i++) {
		for (int j = 0; j < MAP_HEIGHT; j++) {
			mat[i][j] = map[i][j];
		}
	}
}

//Third Pattern of Map

void MapManager::createMapIII() {

	mat = new int*[MAP_WIDTH];
	for (int i = 0; i < MAP_WIDTH; ++i)
		mat[i] = new int[MAP_HEIGHT];

	int random0 = RandomHelper::random_int(GROUND, GRASS);
	int random1 = RandomHelper::random_int(GROUND, WATER);
	int random2 = RandomHelper::random_int(NONE, WALL);
	int random3 = RandomHelper::random_int(NONE, WATER);

	int map[MAP_WIDTH][MAP_HEIGHT] = {
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, random1, random1, random1, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, random1, random1, random1, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, random1, random1, random1, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, random1, random1, random1, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, random1, random1, random1, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, random3, random3, GRASS, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, random3, random3, GRASS, GROUND, GRASS, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, random3, random3, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, random3, random3, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GRASS, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, random3, random3, random3, random3, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random2, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GRASS, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, random3, random3, random3, random3, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random2, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, random3, random3, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GRASS, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, random3, random3, random3, random3, random3, GROUND, GROUND, GROUND, random2, GROUND, GROUND, GROUND, random2, GROUND, GROUND, random2, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GRASS, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, random3, random3, random3, random3, random3, GROUND, GROUND, GROUND, GROUND, random2, GROUND, GROUND, random2, GROUND, random2, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, random3, random3, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GRASS, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, random3, random3, random3, random3, random3, GROUND, GROUND, GROUND, GROUND, GROUND, random2, random2, random2, random2, random2, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, random3, random3, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, random3, random3, random3, random3, random3, GROUND, GROUND, GROUND, GROUND, GROUND, random2, random2, random2, random2, random2, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, random3, random3, GRASS, GROUND, GRASS, GROUND, GRASS, GRASS, GRASS, GRASS, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random2, random2, random2, random2, random2, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, random3, random3, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random2, GROUND, GROUND, random2, GROUND, GROUND, random2, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random2, GROUND, GROUND, GROUND, random2, GROUND, GROUND, GROUND, random2, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GROUND, GROUND, GROUND, random0, GROUND, random0, GROUND, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random2, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, random0, GROUND, random0, GROUND, random0, GROUND, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GROUND, GROUND, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GROUND, random0, GROUND, random0, GROUND, random0, GROUND, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, WALL },
		{ WALL, GOAL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL }
	};

	for (int i = 0; i < MAP_WIDTH; i++) {
		for (int j = 0; j < MAP_HEIGHT; j++) {
			mat[i][j] = map[i][j];
		}
	}
}

//Fourth Pattern of Map

void MapManager::createMapIV() {

	mat = new int*[MAP_WIDTH];
	for (int i = 0; i < MAP_WIDTH; ++i)
		mat[i] = new int[MAP_HEIGHT];

	int random0 = RandomHelper::random_int(GROUND, GRASS);
	int random1 = RandomHelper::random_int(GROUND, WATER);
	int random2 = RandomHelper::random_int(NONE, WALL);
	int random3 = RandomHelper::random_int(NONE, WATER);

	int map[MAP_WIDTH][MAP_HEIGHT] = {
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, GROUND, GROUND, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, random2, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, WALL },
		{ WALL, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, WALL },
		{ WALL, random3, GROUND, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, WALL },
		{ WALL, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, random1, GROUND, GROUND, WALL },
		{ WALL, GROUND, random3, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, random1, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random3, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, random1, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, random3, GROUND, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, random3, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, random0, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, WALL },
		{ WALL, GROUND, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random3, GROUND, GROUND, GROUND, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random3, GROUND, GROUND, GROUND, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL, GROUND, WALL },
		{ WALL, GROUND, GROUND, random3, GROUND, GROUND, GROUND, GROUND, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, random3, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, WALL },
		{ WALL, GOAL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL }
	};

	for (int i = 0; i < MAP_WIDTH; i++) {
		for (int j = 0; j < MAP_HEIGHT; j++) {
			mat[i][j] = map[i][j];
		}
	}
}

//Fifth Pattern of Map

void MapManager::createMapV() {

	mat = new int*[MAP_WIDTH];
	for (int i = 0; i < MAP_WIDTH; ++i)
		mat[i] = new int[MAP_HEIGHT];

	int random0 = RandomHelper::random_int(GROUND, GRASS);
	int random1 = RandomHelper::random_int(GROUND, WATER);
	int random2 = RandomHelper::random_int(NONE, WALL);
	int random3 = RandomHelper::random_int(NONE, WATER);

	int map[MAP_WIDTH][MAP_HEIGHT] = {
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random2, random2, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random2, random2, random2, random2, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, random2, random2, random2, random2, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, random2, random2, random2, random2, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random2, random2, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, random2, random2, random2, random2, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, random2, random2, random2, random2, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, random2, random2, random2, random2, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, random2, random2, random2, random2, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, random2, random2, random2, random2, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, random3, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, GRASS, random0, GRASS, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, GRASS, random3, GRASS, GRASS, random3, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, random3, GRASS, random3, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, random3, random3, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, random3, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, random0, random0, random0, random0, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, random0, random0, random0, random0, random0, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random3, GRASS, WALL },
		{ WALL, GRASS, random0, random0, random0, random0, random0, random0, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, random0, random0, random0, random0, random0, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, random2, random2, random2, random2, random2, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, random2, random2, random2, random2, GRASS, GRASS, GRASS, GRASS, GRASS, random1, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, random0, random0, random0, random0, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random2, random2, random2, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, random0, random0, random0, random0, random0, random0, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random2, random2, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, random2, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GOAL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL }
	};

	for (int i = 0; i < MAP_WIDTH; i++) {
		for (int j = 0; j < MAP_HEIGHT; j++) {
			mat[i][j] = map[i][j];
		}
	}
}

//Sixth Pattern of Map

void MapManager::createMapVI() {

	mat = new int*[MAP_WIDTH];
	for (int i = 0; i < MAP_WIDTH; ++i)
		mat[i] = new int[MAP_HEIGHT];

	int random0 = RandomHelper::random_int(GROUND, GRASS);
	int random1 = RandomHelper::random_int(GROUND, WATER);
	int random2 = RandomHelper::random_int(NONE, WALL);
	int random3 = RandomHelper::random_int(NONE, WATER);

	int map[MAP_WIDTH][MAP_HEIGHT] = {
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, GRASS, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random1, random1, random1, random1, random1, random0, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random1, random1, random1, random1, random1, random0, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random1, random1, random1, random1, random1, random0, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random1, random1, random1, random1, random1, random0, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random1, random1, random1, random1, random1, random0, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random1, random1, random1, random1, random1, random0, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random1, random1, random1, random1, random1, random0, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, random0, random0, random0, random0, random0, random0, random0, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, random3, random3, random3, random3, random3, random3, random3, random3, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, random3, random2, random2, random2, random2, random2, random2, random3, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, random3, random2, random2, random2, random2, random2, random2, random3, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, random3, random2, random2, random2, random2, random2, random2, random3, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GRASS, WATER, WATER, WATER, WATER, GRASS, GROUND, GROUND, GROUND, GROUND, random3, random3, random3, random3, random3, random3, random3, random3, WALL, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GRASS, GRASS, GRASS, GRASS, GRASS, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, WALL, WALL, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, WALL, WALL, WALL },
		{ WALL, GOAL, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, GROUND, WALL, GROUND, GROUND, GROUND, WALL },
		{ WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL }
	};

	for (int i = 0; i < MAP_WIDTH; i++) {
		for (int j = 0; j < MAP_HEIGHT; j++) {
			mat[i][j] = map[i][j];
		}
	}
}

//New Pattern of Map in the next iterations


//Method which loads pseudo-randomly one of the Maps

void MapManager::createMap() {

	auto random = RandomHelper::random_int(1, 6);
	if (random == 1) {
	this->createMapI();
	}
	else if (random == 2) {
	this->createMapII();
	}
	else if (random == 3) {
	this->createMapIII();
	}
	else if (random == 4) {
	this->createMapIV();
	}
	else if (random == 5) {
	this->createMapV();
	}
	else if (random == 6) {
	this->createMapVI();
	}
}

//Method which adaptes the Map according to device's screen resolution

void MapManager::resizeMap() {

	for (int i = 0; i < MAP_WIDTH; i++) {
		for (int j = 0; j < MAP_HEIGHT; j++) {
			auto tiles = layer->getTileAt(Vec2(j, i));
			tiles->setScale(25 / tiles->getContentSize().width);
			tiles->setPosition(Vec2(Director::getInstance()->getVisibleOrigin().x + 25 * j, -25 + Director::getInstance()->getVisibleOrigin().y + MAP_SIZE_HEIGHT - 25 * i));
		}
	}

}


//Method which loads pseudo-randomly some enemies on the Scene

void MapManager::positionEnemies() {
	int randomEnemies = RandomHelper::random_int(0, 9);
	for (int i = 0; i <= randomEnemies; i++) {
		EnemyType randomTypeEnemy = (EnemyType)RandomHelper::random_int(0, 3);
		if (randomTypeEnemy == SENTRY) {
			enemies[i] = Enemy::create("Sentry.png");
			enemies[i]->setScale(25 / layer->getTileAt(Vec2(0, 0))->getContentSize().width);
			enemies[i]->setState(IDLE);
			enemies[i]->setType(SENTRY);
			enemies[i]->setMapGame(this);
			enemies[i]->setMappa(this->getMap());
			enemies[i]->setTileMap(this->getTileMap());
			enemies[i]->setActualScene(EXPLORATION);
			enemies[i]->setActualWeapon((Weapon)RandomHelper::random_int(1, 3));
			enemies[i]->setActualProtection((Protection)RandomHelper::random_int(0, 4));
			Point randomEnemyPosition = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
			Point enemyControl = this->tileCoordForPosition(randomEnemyPosition);
			while (mat[(int)enemyControl.x][(int)enemyControl.y] == WALL || mat[(int)enemyControl.x][(int)enemyControl.y] == WATER || mat[(int)enemyControl.x][(int)enemyControl.y] == NONE) {
				randomEnemyPosition = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
				enemyControl = this->tileCoordForPosition(randomEnemyPosition);
			}
			enemies[i]->setPosition(randomEnemyPosition);
			enemies[i]->setFirstDestination(Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950)));
			enemies[i]->setSecondDestination(Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950)));
			enemies[i]->setDestination(enemies[i]->getFirstDestination());
			enemies[i]->setTarget(_player);
			tile->addChild(enemies[i], 5, "Enemy");
			enemies[i]->scheduleUpdate();
		}
		else if (randomTypeEnemy == KAMIKAZE) {
			enemies[i] = Enemy::create("Kamikaze.png");
			enemies[i]->setScale(25 / layer->getTileAt(Vec2(0, 0))->getContentSize().width);
			enemies[i]->setState(IDLE);
			enemies[i]->setType(KAMIKAZE);
			enemies[i]->setMapGame(this);
			enemies[i]->setMappa(this->getMap());
			enemies[i]->setTileMap(this->getTileMap());
			enemies[i]->setActualScene(EXPLORATION);
			enemies[i]->setActualProtection((Protection)RandomHelper::random_int(0, 4));
			Point randomEnemyPosition1 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
			Point enemyControl1 = this->tileCoordForPosition(randomEnemyPosition1);
			while (mat[(int)enemyControl1.x][(int)enemyControl1.y] == WALL || mat[(int)enemyControl1.x][(int)enemyControl1.y] == WATER || mat[(int)enemyControl1.x][(int)enemyControl1.y] == NONE) {
				randomEnemyPosition1 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
				enemyControl1 = this->tileCoordForPosition(randomEnemyPosition1);
			}
			enemies[i]->setPosition(randomEnemyPosition1);
			enemies[i]->setTarget(_player);
			tile->addChild(enemies[i], 5, "Enemy");
			enemies[i]->scheduleUpdate();
		}
		else if (randomTypeEnemy == TOWER) {
			enemies[i] = Enemy::create("Tower.png");
			enemies[i]->setScale(25 / layer->getTileAt(Vec2(0, 0))->getContentSize().width);
			enemies[i]->setState(IDLE);
			enemies[i]->setType(TOWER);
			enemies[i]->setMapGame(this);
			enemies[i]->setMappa(this->getMap());
			enemies[i]->setTileMap(this->getTileMap());
			enemies[i]->setActualScene(EXPLORATION);
			enemies[i]->setActualWeapon((Weapon) RandomHelper::random_int(4,5));
			enemies[i]->setActualProtection((Protection)RandomHelper::random_int(0, 4));
			Point randomEnemyPosition3 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
			Point enemyControl3 = this->tileCoordForPosition(randomEnemyPosition3);
			while (mat[(int)enemyControl3.x][(int)enemyControl3.y] == WALL || mat[(int)enemyControl3.x][(int)enemyControl3.y] == WATER || mat[(int)enemyControl3.x][(int)enemyControl3.y] == NONE) {
				randomEnemyPosition3 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
				enemyControl3 = this->tileCoordForPosition(randomEnemyPosition3);
			}
			enemies[i]->setPosition(randomEnemyPosition3);
			enemies[i]->setTarget(_player);
			tile->addChild(enemies[i], 5, "Enemy");
			enemies[i]->scheduleUpdate();
		}
		else if (randomTypeEnemy == SCOUT) {
			enemies[i] = Enemy::create("Scout.png");
			enemies[i]->setScale(25 / layer->getTileAt(Vec2(0, 0))->getContentSize().width);
			enemies[i]->setState(IDLE);
			enemies[i]->setType(SCOUT);
			enemies[i]->setMapGame(this);
			enemies[i]->setMappa(this->getMap());
			enemies[i]->setTileMap(this->getTileMap());
			enemies[i]->setActualScene(EXPLORATION);
			enemies[i]->setActualWeapon((Weapon)RandomHelper::random_int(3, 4));
			enemies[i]->setActualProtection((Protection)RandomHelper::random_int(0, 4));
			Point randomEnemyPosition4 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
			Point enemyControl4 = this->tileCoordForPosition(randomEnemyPosition4);
			while (mat[(int)enemyControl4.x][(int)enemyControl4.y] == WALL || mat[(int)enemyControl4.x][(int)enemyControl4.y] == WATER || mat[(int)enemyControl4.x][(int)enemyControl4.y] == NONE) {
				randomEnemyPosition4 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
				enemyControl4 = this->tileCoordForPosition(randomEnemyPosition4);
			}
			enemies[i]->setPosition(randomEnemyPosition4);
			enemies[i]->setFirstDestination(Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950)));
			enemies[i]->setSecondDestination(Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950)));
			enemies[i]->setDestination(enemies[i]->getFirstDestination());
			enemies[i]->setTarget(_player);
			tile->addChild(enemies[i], 5, "Enemy");
			enemies[i]->scheduleUpdate();
		}
	}
}

//Method which loads pseudo-randomly some items on the Scene

void MapManager::positionObjects() {
	int randomObjects = RandomHelper::random_int(0, 9);
	for (int i = 0; i <= randomObjects; i++) {
		Thing randomTypeObject = (Thing)RandomHelper::random_int(1, 4);
		if (randomTypeObject == CURE) {
			objects[i] = Item::create("Medikit.png");
			objects[i]->setScale(25 / layer->getTileAt(Vec2(0, 0))->getContentSize().width);
			Point randomPosition = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
			Point control = this->tileCoordForPosition(randomPosition);
			while (mat[(int)control.x][(int)control.y] == WALL || mat[(int)control.x][(int)control.y] == WATER || mat[(int)control.x][(int)control.y] == NONE) {
				randomPosition = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
				control = this->tileCoordForPosition(randomPosition);
			}
			objects[i]->setPosition(randomPosition);
			objects[i]->setPlayer(_player);
			tile->addChild(objects[i]);
			objects[i]->scheduleUpdate();
		}
		else if (randomTypeObject == POWER_UP) {
			objects[i] = Item::create("FMJ.png");
			objects[i]->setScale(25 / layer->getTileAt(Vec2(0, 0))->getContentSize().width);
			Point randomPosition1 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
			Point control1 = this->tileCoordForPosition(randomPosition1);
			while (mat[(int)control1.x][(int)control1.y] == WALL || mat[(int)control1.x][(int)control1.y] == WATER || mat[(int)control1.x][(int)control1.y] == NONE) {
				randomPosition1 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
				control1 = this->tileCoordForPosition(randomPosition1);
			}
			objects[i]->setPosition(randomPosition1);
			objects[i]->setPlayer(_player);
			tile->addChild(objects[i]);
			objects[i]->scheduleUpdate();
		}
		else if (randomTypeObject == DEFENSE_UP){
			objects[i] = Item::create("Shell.png");
			objects[i]->setScale(25 / layer->getTileAt(Vec2(0, 0))->getContentSize().width);
			Point randomPosition2 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
			Point control2 = this->tileCoordForPosition(randomPosition2);
			while (mat[(int)control2.x][(int)control2.y] == WALL || mat[(int)control2.x][(int)control2.y] == WATER || mat[(int)control2.x][(int)control2.y] == NONE) {
				randomPosition2 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
				control2 = this->tileCoordForPosition(randomPosition2);
			}
			objects[i]->setPosition(randomPosition2);
			objects[i]->setPlayer(_player);
			tile->addChild(objects[i]);
			objects[i]->scheduleUpdate();
		}
		else if (randomTypeObject == CHEST) {
			objects[i] = Item::create("Chest.png");
			objects[i]->setScale(25 / layer->getTileAt(Vec2(0, 0))->getContentSize().width);
			Point randomPosition3 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
			Point control3 = this->tileCoordForPosition(randomPosition3);
			while (mat[(int)control3.x][(int)control3.y] == WALL || mat[(int)control3.x][(int)control3.y] == WATER || mat[(int)control3.x][(int)control3.y] == NONE) {
				randomPosition3 = Point(RandomHelper::random_int(25, 950), RandomHelper::random_int(25, 950));
				control3 = this->tileCoordForPosition(randomPosition3);
			}
			objects[i]->setPosition(randomPosition3);
			objects[i]->setPlayer(_player);
			tile->addChild(objects[i]);
			objects[i]->scheduleUpdate();
		}
	}
}

//Method which asks GameManager to load the CombatScene and starts the battle

void MapManager::beginBattle(Enemy* enemy) {
	GameManager::getInstance()->startBattle(enemy, _player);
	tile->removeChild(enemy);
	return;
}

//Getters & Setters

int** MapManager::getMap() {
	return mat;
}

TMXTiledMap* MapManager::getTileMap() {
	return tile;
}

void MapManager::setStrategyMenu(StrategyMenu* strategy) {
	this->strategy = strategy;
}

void MapManager::setPlayer(Player* player) {
	this->_player = player;
}

Player* MapManager::getPlayer() {
	return this->_player;
}

HudLayer* MapManager::getHud() {
	return this->hud;
}

void MapManager::setHud(HudLayer* hud) {
	this->hud = hud;
}
